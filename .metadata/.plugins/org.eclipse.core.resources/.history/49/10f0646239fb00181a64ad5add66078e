package nonlivingthngs;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;

import main.BasicObject;
import utility.Util;

public class Leaf extends BasicObject {

	private GeneralPath mainBody;

	private  double xPoints[];

	private  double yPoints[] ;

	private Color leafColor; // shape color

	public Leaf(float x, float y, float w, float h, float size) {
		super(x, y, w, h, size);

	}

	@Override
	protected void setColAttributes() {
		// TODO Auto-generated method stub
		leafColor = Util.HSB(120, 100, 80);
	}

	@Override
	protected void setShapeAttributes() {
	xPoints[]=	{ 0, -width / 2, 0, width / 2 };
yPoints[]=		 { height / 2, 0, -height / 2, 0 };	
mainBody = new GeneralPath();
		
		mainBody.moveTo(xPoints[0], yPoints[0]);
		for (int k = 1; k < xPoints.length; k++)
			mainBody.lineTo(xPoints[k], yPoints[k]);
		mainBody.closePath();
	}

	@Override
	public void draw(Graphics2D g2) {
		g2.setColor(leafColor);
		g2.fill(mainBody);
		g2.fill(new Rectangle2D.Double(0, 0,50,50));
	}

	@Override
	protected void setBoundingBox() {
		boundingBox = new Area(mainBody);

	}

	@Override
	public AffineTransform getAffineTransform() {
		AffineTransform at = new AffineTransform();
		at.translate(pos.x, pos.y);
		// at.rotate(Math.PI/2);
		at.scale(size, size);
		return at;
	}

	@Override
	public void update(ArrayList<BasicObject> objList) {
		// nothing, leaf don't need to be updated
	}
}
